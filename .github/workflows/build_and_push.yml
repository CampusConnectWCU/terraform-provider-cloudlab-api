name: Build & Push cloudlab-terraform-api to GHCR

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to publish (e.g., v1.2.3)"
        required: true
        type: string
  release:
    types: [published]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_BASENAME: cloudlab-terraform-api

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute owner (lowercase) + tag
        id: vars
        run: |
          owner_lc=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          echo "owner_lc=$owner_lc" >> $GITHUB_OUTPUT
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            tag="${{ inputs.tag }}"
          else
            tag="${{ github.ref_name }}"   # e.g. v1.2.3 from the Release
          fi
          [ -n "$tag" ] || { echo "No tag resolved"; exit 1; }
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Set up QEMU 
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (Dockerfile â†’ GHCR)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.owner_lc }}/${{ env.IMAGE_BASENAME }}:${{ steps.vars.outputs.tag }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Tag & Push latest (registry retag; on release only)
        if: github.event_name == 'release'
        env:
          IMAGE: ${{ env.REGISTRY }}/${{ steps.vars.outputs.owner_lc }}/${{ env.IMAGE_BASENAME }}
          TAG: ${{ steps.vars.outputs.tag }}
        run: |
          set -euo pipefail
          docker buildx imagetools create \
            --tag "${IMAGE}:latest" \
            "${IMAGE}:${TAG}"
